{
  "5001": {
    "id": 5001,
    "question": "Что такое «шаблон проектирования»?",
    "answer": "Проверенное и готовое к использованию логическое решение, которе может быть реализовано по-разному в разных языках программирования. <p>Плюсы: <p>-снижение сложности разработки за счёт готовых абстракций облегчение <p>-коммуникации между разработчиками <p>Минусы: <p>-слепое следование некоторому шаблону может привести к усложнению программы. <p>-желание попробовать некоторый шаблон в деле без особых на то оснований."
  },
  "5002": {
    "id": 5002,
    "question": "Назовите основные характеристики шаблонов.",
    "answer": "Имя - все шаблоны имеют уникальное имя, служащее для их идентификации; <p>Назначение данного шаблона; <p>Задача, которую шаблон позволяет решить; <p>Способ решения, предлагаемый в шаблоне для решения задачи в том контексте, где этот шаблон был найден; <p>Участники - сущности, принимающие участие в решении задачи; <p>Следствия от использования шаблона как результат действий, выполняемых в шаблоне; <p>Реализация - возможный вариант реализации шаблона."
  },
  "5003": {
    "id": 5003,
    "question": "Назовите три основные группы паттернов.",
    "answer": "Порождающие - отвечают за удобное и безопасное создание новых объектов или даже целых семейств объектов без внесения в программу лишних зависимостей. <p>Структурные - отвечают за построение удобных в поддержке иерархий классов <p>Поведенческие - заботятся об эффективной коммуникации между объектами. <p>Основные - основные строительные блоки, используемые для построения других шаблонов. Например, интерфейс."
  },
  "5004": {
    "id": 5004,
    "question": "Расскажите про паттерн Одиночка (Singleton)",
    "answer": "Порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа. Конструктор помечается как private, а для создания нового объекта Singleton использует специальный метод getInstance(). Он либо создаёт объект, либо отдаёт существующий объект, если он уже был создан. <p>Почему считается антипаттерном? <p>-Нельзя тестировать с помощью mock, но можно использовать powerMock. <p>-Нарушает принцип единой ответственности <p>-Нарушает Open/Close принцип, его нельзя расширить <p>Можно ли его синхронизировать без synchronized у метода? <p>-Можно сделать его Enum (eager). Это статический final класс с константами. JVM загружает final и static классы на этапе компиляции, а значит несколько потоков не могут создать несколько инстансов. <p>-C помощью double checked locking (lazy).<p>",
    "url": {
      "Потокобезопасный Singleton": "https://drive.google.com/file/d/13Ccre0-1EeF8yE4sxebxZBAaEOxtYpwz/view?usp=share_link"
    }
  },
  "5005": {
    "id": 5005,
    "question": "Расскажите про паттерн Строитель (Builder).",
    "answer": "Порождающий паттерн, который позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений одного объекта. Паттерн предлагает вынести конструирование объекта за пределы его собственного класса, поручив это дело отдельным объектам, называемым строителями. Процесс конструирования объекта разбить на отдельные шаги (например, построитьСтены, вставитьДвери). Чтобы создать объект, вам нужно поочерёдно вызывать методы строителя. Причём не нужно запускать все шаги, а только те, что нужны для производства объекта определённой конфигурации. Можно пойти дальше и выделить вызовы методов строителя в отдельный класс, называемый директором. В этом случае директор будет задавать порядок шагов строительства, а строитель — выполнять их. <p>+: Позволяет использовать один и тот же код для создания различных объектов. Изолирует сложный код сборки объектов от его основной бизнес-логики. <p>- : Усложняет код программы из-за введения дополнительных классов."
  }

}