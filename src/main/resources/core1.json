{
  "1001": {
    "id": 1001,
    "question": "Что такое ООП?",
    "answer": "ООП - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. <p>Согласно парадигме ООП программа состоит из объектов, обменивающихся сообщениями. Объекты могут обладать состоянием, единственный способ изменить состояние объекта - передать ему сообщение, в ответ на которое, объект может изменить собственное состояние. <p>Класс — это описание еще не созданного объекта, как бы общий шаблон, состоящий из полей, методов и конструктора, а объект – экземпляр класса, созданный на основе этого описания."
  },
  "1002": {
    "id": 1002,
    "question": "Какие преимущества у ООП?",
    "answer": "Легко читается - не нужно выискивать в коде функции и выяснять, за что они отвечают. <p>Быстро пишется - можно быстро создать сущности, с которыми должна работать программа. <p>Простота реализации большого функционала - т.к. на написание кода уходит меньше времени, можно гораздо быстрее создать приложение с множеством возможностей. <p>Меньше повторений кода - не нужно писать однотипные функции для разных сущностей."
  },
  "1003": {
    "id": 1003,
    "question": "Какие недостатки у ООП?",
    "answer": "Потребление памяти - объекты потребляют больше оперативной памяти, чем примитивные типы данных. <p>Снижает производительность - многие вещи технически реализованы иначе, поэтому они используют больше ресурсов. <p>Неэффективность и неэкономное распределения памяти на этапе выполнения (по причине издержек на динамическое связывание и проверки типов на этапе выполнения). <p>Излишняя универсальность. Часто содержится больше методов, чем это реально необходимо текущей программе. А поскольку лишние методы не могут быть удалены, они становятся мертвым грузом. <p>Сложно начать - парадигма ООП сложнее функционального программирования, поэтому на старт уходит больше времени"
  },
  "1004": {
    "id": 1004,
    "question": "Назовите основные принципы ООП",
    "answer": "Абстракция <p>Инкапсуляция <p>Наследование <p>Полиморфизм"
  },
  "1005": {
    "id": 1005,
    "question": "Что такое инкапсуляция? (С примером)",
    "answer": "Свойство системы, которое объединяет данные и методы, манипулирующие этими данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования. <p>Инкапсуляция - это объединение данных и методов работы с этими данными в одной упаковке («капсуле»). <p>Чтобы малейшее изменение в классе не влекло за собой изменение внешнего поведения класса."
  },
  "1006": {
    "id": 1006,
    "question": "Что такое наследование? (С примером)",
    "answer": "Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью заимствованной функциональностью."
  },
  "1007": {
    "id": 1007,
    "question": "Что такое полиморфизм? (С примером)",
    "answer": "Полиморфизм – предоставляет возможность единообразно обрабатывать объекты с различной реализацией при условии наличия у них общего интерфейса или класса. <p>Есть три вида полиморфизма: <p>-ad hoc полиморфизм, основан на различении типов. Для различных типов аргументов используется разный код метода, пример статического - перегрузка метода. Пример динамического - переопределение метода.<p>-параметрический полиморфизм - ситуация, когда один и тот же метод работает с аргументами различных типов одинаково, не зависимо от их точного типа. Пример — функция, работающая с объектом некоторого класса C, может без изменений работать с объектом порождённого от C класса (этот вид полиморфизма часто называют полиморфизм включения).<p>-subtype полиморфизм - самый популярный - возможность объектов с одинаковой спецификацией(интерфейс\\класс\\abstract класс) иметь различную реализацию.<p>Пример: Переопределение методов, интерфейсы."
  },
  "1008": {
    "id": 1008,
    "question": "Что такое ассоциация?",
    "answer": "Есть два типа связи между объектами: ассоциация, которая делится на композицию и агрегацию, и наследование. <p>Ассоциация - обозначает связь между объектами. Например, игрок играет в определенной команде. <p>Ассоциация означает, что объекты двух классов могут ссылаться один на другой, иметь некоторую связь между друг другом. Например Менеджер может выписать Счет. Соответственно возникает ассоциация между Менеджером и Счетом. Еще пример — Преподаватель и Студент — т.е. какой-то Студент учится у какого-то Преподавателя. Ассоциация и есть описание связи между двумя объектами. Студент учится у Преподавателя. Идея достаточно простая — два объекта могут быть связаны между собой и это надо как-то описать.<p>",
    "url": {
      "Отношения между классами (объектами)": "https://java-course.ru/begin/relations/"
    }
  },
  "1009": {
    "id": 1009,
    "question": "Что такое композиция?",
    "answer": "Композиция — еще более «жесткое отношение, когда объект не только является частью другого объекта, но и вообще не может принадлежат еще кому-то. Например Машина и Двигатель. Хотя двигатель может быть и без машины, но он вряд ли сможет быть в двух или трех машинах одновременно. В отличии от студента, который может входить и в другие группы тоже."
  },
  "1010": {
    "id": 1010,
    "question": "Что такое агрегация?",
    "answer": "Агрегация является особой формой ассоциации. Это более конкретизированные отношения между объектами. <p>Агрегация — отношение когда один объект является частью другого. <p>Например: Студент входит в Группу любителей физики. Это представляет отношения HAS-A. <p>Агрегация определяет отношение HAS A (имеет), но связь слабее, чем в композиции, т.к. объекты будут равноправны."
  }
}