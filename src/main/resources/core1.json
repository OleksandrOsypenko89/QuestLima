{
  "1001": {
    "id": 1001,
    "question": "Что такое ООП?",
    "answer": "ООП - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. Согласно парадигме ООП программа состоит из объектов, обменивающихся сообщениями. Объекты могут обладать состоянием, единственный способ изменить состояние объекта - передать ему сообщение, в ответ на которое, объект может изменить собственное состояние. Класс — это описание еще не созданного объекта, как бы общий шаблон, состоящий из полей, методов и конструктора, а объект – экземпляр класса, созданный на основе этого описания."
  },
  "1002": {
    "id": 1002,
    "question": "Какие преимущества у ООП?",
    "answer": "Легко читается - не нужно выискивать в коде функции и выяснять, за что они отвечают. Быстро пишется - можно быстро создать сущности, с которыми должна работать программа. Простота реализации большого функционала - т.к. на написание кода уходит меньше времени, можно гораздо быстрее создать приложение с множеством возможностей. Меньше повторений кода - не нужно писать однотипные функции для разных сущностей."
  },
  "1003": {
    "id": 1003,
    "question": "Какие недостатки у ООП?",
    "answer": "Потребление памяти - объекты потребляют больше оперативной памяти, чем примитивные типы данных. Снижает производительность - многие вещи технически реализованы иначе, поэтому они используют больше ресурсов. Неэффективность и неэкономное распределения памяти на этапе выполнения (по причине издержек на динамическое связывание и проверки типов на этапе выполнения). Излишняя универсальность. Часто содержится больше методов, чем это реально необходимо текущей программе. А поскольку лишние методы не могут быть удалены, они становятся мертвым грузом. Сложно начать - парадигма ООП сложнее функционального программирования, поэтому на старт уходит больше времени"
  },
  "1004": {
    "id": 1004,
    "question": "Назовите основные принципы ООП",
    "answer": "Абстракция, Инкапсуляция, Наследование, Полиморфизм"
  },
  "1005": {
    "id": 1005,
    "question": "Stack и Heap",
    "answer": "Память процесса делится на Stack (стек) и Heap (куча) :- Stack содержит staсk frame'ы, они делятся на три части: параметры метода, указатель на предыдущий фрейм и локальные переменные. - Структура Heap зависит от выбранного сборщика мусора. Читай про GC! MetaSpace - специальное пространство кучи, отделенное от кучи основной памяти. JVM хранит здесь весь статический контент. Это включает в себя все статические методы, примитивные переменные и ссылки на статические объекты. Кроме того, он содержит данные о байт-коде, именах и JIT-информации . До Java 7 String Pool также был частью этой памяти. Вкратце, при Serial/Parallel/CMS GC будет следующая структура: С помощью опций Xms и Xmx можно настроить начальный и максимально допустимый размер кучи соответственно. Существуют опции для настройки величины стека. - Heap - используется всем приложением, Stack - одним потоком исполняемой программы. <p>- Новый объект создается в heap, в stack размещается ссылка на него. В стеке размещаются локальные переменные примитивных типов. <p>- Объекты в куче доступны из любого места программы, стековая память не доступна для других потоков. <p>- Если память стека закончилась JRE вызовет исключение StackOverflowError, если куча заполнена OutOfMemoryError <p>- Размер памяти стека, меньше памяти кучи. Стековая память быстрее памяти кучи. <p>- В куче есть ссылки между объектами и их классами. На этом основана рефлексия. Обе области хранятся в RAM.(оперативная память)",
    "url": {
      "rezka": "https://hdrezka.co"
    },
    "picture": "/pictures/1005_1.png"
  }
}